---
## Amazon Aurora Labs for MySQL
## Infrastructure template for the documentation website
##
## Changelog:
## 2019-07-03 - Initial release
## 2019-07-30 - Production website configuration (aliases, certificate, conditions)
##
## Dependencies:
## none
##
## License:
## This sample code is made available under the MIT-0 license. See the LICENSE file.

# Transformations
AWSTemplateFormatVersion: 2010-09-09
Description: 'Amazon Aurora Labs for MySQL'
Transform: 'AWS::Serverless-2016-10-31'

## Parameters
Parameters:
  tagEnvironment:
    Type: String
    Description: 'What is this environment tagged as?'
    AllowedValues: [ prod, dev, test, stage ]
    Default: dev

## Conditions
Conditions:
  condProd: !Equals [ !Ref tagEnvironment, "prod" ]

## Resources
Resources:
  ## OAI for CloudFront
  oaiWebsite:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub '${AWS::StackName}-oai'

  ## S3 bucket to host content
  s3Website:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${AWS::StackName}-content-${AWS::Region}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-content-${AWS::Region}'
        - Key: Environment
          Value: !Ref tagEnvironment
        - Key: Workload
          Value: !Ref 'AWS::StackName'

  ## S3 bucket policy for OAI
  bucketPolicyWebsite:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref s3Website
      PolicyDocument:
        Statement:
          - Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${s3Website}/*'
            Action:
              - 's3:GetObject'
            Principal:
              CanonicalUser:
                - !GetAtt oaiWebsite.S3CanonicalUserId

## Create execution role for IpCheck function
  roleIpCheck:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${AWS::StackName}-ipcheck-${AWS::Region}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'sts:AssumeRole'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
                - 'edgelambda.amazonaws.com'
      Policies:
        - PolicyName: 'inline-policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'

## Create execution role for IndexDoc function
  roleIndexDoc:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${AWS::StackName}-indexdoc-${AWS::Region}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'sts:AssumeRole'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
                - 'edgelambda.amazonaws.com'
      Policies:
        - PolicyName: 'inline-policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'

  ## IP filtering function
  funcIpCheck:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-ipcheck-${AWS::Region}'
      Runtime: nodejs10.x
      Handler: function.handler
      CodeUri: ../lambda/ipcheck-function/dist/ipcheck-function_latest.zip
      Description: 'Request IP address verification function for CloudFront distribution'
      MemorySize: 128
      Timeout: 5
      Role: !GetAtt roleIpCheck.Arn
      Tags:
        Name: !Sub '${AWS::StackName}-ipcheck-${AWS::Region}'
        Environment: !Ref tagEnvironment
        Workload: !Ref 'AWS::StackName'

  ## Index dodcument function
  funcIndexDoc:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-indexdoc-${AWS::Region}'
      Runtime: nodejs10.x
      Handler: function.handler
      CodeUri: ../lambda/indexdoc-function/dist/indexdoc-function_latest.zip
      Description: 'Injects index.html into any URI equest for subfolders in the path'
      MemorySize: 128
      Timeout: 5
      Role: !GetAtt roleIndexDoc.Arn
      Tags:
        Name: !Sub '${AWS::StackName}-indexdoc-${AWS::Region}'
        Environment: !Ref tagEnvironment
        Workload: !Ref 'AWS::StackName'

  ## IP filtering function version
  funcIpCheckVersion:
    Type: AWS::Lambda::Version
    Properties:
      Description: 'Request IP address verification function for CloudFront distribution'
      FunctionName: !Ref funcIpCheck

  ## Index document function version
  funcIndexDocVersion:
    Type: AWS::Lambda::Version
    Properties:
      Description: 'Injects index.html into any URI equest for subfolders in the path'
      FunctionName: !Ref funcIndexDoc

  ## CloudFront distribution
  cfWebsite:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Comment: !Sub '${AWS::StackName}-cdn'
        Aliases: !If [ condProd, [ 'awsauroralabsmysql.com', 'www.awsauroralabsmysql.com' ], !Ref "AWS::NoValue" ]
        DefaultRootObject: index.html
        Enabled: true
        IPV6Enabled: true
        PriceClass: PriceClass_All
        ViewerCertificate:
          CloudFrontDefaultCertificate: !If [ condProd, !Ref "AWS::NoValue", true ]
          AcmCertificateArn: !If [ condProd, !Sub 'arn:aws:acm:us-east-1:${AWS::AccountId}:certificate/09a8aa1c-1e30-45e8-b201-a7d4aee7541f', !Ref "AWS::NoValue" ]
          MinimumProtocolVersion: 'TLSv1.1_2016'
          SslSupportMethod: !If [ condProd, 'sni-only', !Ref "AWS::NoValue" ]
        Restrictions:
          GeoRestriction:
            RestrictionType: blacklist
            Locations: [ AF, IR, IQ, LY, SY ]
        DefaultCacheBehavior:
          AllowedMethods: [ GET, HEAD ]
          CachedMethods: [ GET, HEAD ]
          Compress: true
          MaxTTL: 86400
          MinTTL: 0
          DefaultTTL: 3600
          TargetOriginId: !Sub ${s3Website}-site
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          LambdaFunctionAssociations:
            - EventType: viewer-request
              LambdaFunctionARN: !Ref funcIpCheckVersion
            - EventType: origin-request
              LambdaFunctionARN: !Ref funcIndexDocVersion
        CacheBehaviors:
            - AllowedMethods: [ GET, HEAD ]
              CachedMethods: [ GET, HEAD ]
              Compress: true
              MaxTTL: 86400
              MinTTL: 0
              DefaultTTL: 3600
              TargetOriginId: !Sub ${s3Website}-templates
              PathPattern: /templates/*
              ViewerProtocolPolicy: redirect-to-https
              ForwardedValues:
                QueryString: false
                Cookies:
                  Forward: none
              LambdaFunctionAssociations:
                - EventType: viewer-request
                  LambdaFunctionARN: !Ref funcIpCheckVersion
            - AllowedMethods: [ GET, HEAD ]
              CachedMethods: [ GET, HEAD ]
              Compress: true
              MaxTTL: 86400
              MinTTL: 0
              DefaultTTL: 3600
              TargetOriginId: !Sub ${s3Website}-scripts
              PathPattern: /scripts/*
              ViewerProtocolPolicy: redirect-to-https
              ForwardedValues:
                QueryString: false
                Cookies:
                  Forward: none
              LambdaFunctionAssociations:
                - EventType: viewer-request
                  LambdaFunctionARN: !Ref funcIpCheckVersion
        Origins:
          - Id: !Sub ${s3Website}-site
            DomainName: !Sub '${s3Website}.s3.amazonaws.com'
            OriginPath: /website
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${oaiWebsite}'
          - Id: !Sub ${s3Website}-templates
            DomainName: !Sub '${s3Website}.s3.amazonaws.com'
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${oaiWebsite}'
          - Id: !Sub ${s3Website}-scripts
            DomainName: !Sub '${s3Website}.s3.amazonaws.com'
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${oaiWebsite}'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-cdn-${AWS::Region}'
        - Key: Environment
          Value: !Ref tagEnvironment
        - Key: Workload
          Value: !Ref 'AWS::StackName'

## Outputs
Outputs:
  Environment:
    Value: !Ref tagEnvironment
  ContentBucket:
    Value: !Ref s3Website
  DistroEndpoint:
    Value: !GetAtt cfWebsite.DomainName
  Region:
    Value: !Ref 'AWS::Region'
