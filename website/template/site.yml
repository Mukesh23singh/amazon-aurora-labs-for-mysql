---
## Amazon Aurora Labs for MySQL
## Infrastructure template for the documentation website
##
## Changelog:
## 2019-07-03 - Initial release
## 2019-07-30 - Production website configuration (aliases, certificate, conditions)
## 2020-01-07 - Replaced node.js indexdoc function with python3.7, less dependencies
## 2020-04-06 - Moving to awsauroralabsmy.com domain
##
## Dependencies:
## none
##
## License:
## This sample code is made available under the MIT-0 license. See the LICENSE file.

# Transformations
AWSTemplateFormatVersion: 2010-09-09
Description: 'Amazon Aurora Labs for MySQL'
Transform: 'AWS::Serverless-2016-10-31'

## Parameters
Parameters:
  tagEnvironment:
    Type: String
    Description: 'What is this environment tagged as?'
    AllowedValues: [ prod, dev, test, stage ]
    Default: dev

## Conditions
Conditions:
  condProd: !Equals [ !Ref tagEnvironment, "prod" ]

## Resources
Resources:
  ## OAI for CloudFront
  oaiWebsite:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub '${AWS::StackName}-oai'

  ## S3 bucket to host logs
  s3Logs:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${AWS::StackName}-logs-${AWS::Region}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
            Status: Enabled
          - ExpirationInDays: 90
            Status: Enabled
      AccessControl: LogDeliveryWrite
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-logs-${AWS::Region}'
        - Key: Environment
          Value: !Ref tagEnvironment
        - Key: Workload
          Value: !Ref 'AWS::StackName'

  ## S3 bucket to host content
  s3Website:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${AWS::StackName}-content-${AWS::Region}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
            Status: Enabled
      LoggingConfiguration:
        DestinationBucketName: !Ref s3Logs
        LogFilePrefix: "s3website/"
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-content-${AWS::Region}'
        - Key: Environment
          Value: !Ref tagEnvironment
        - Key: Workload
          Value: !Ref 'AWS::StackName'

  ## S3 bucket policy for OAI
  bucketPolicyWebsite:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref s3Website
      PolicyDocument:
        Statement:
          - Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${s3Website}/*'
            Action:
              - 's3:GetObject'
            Principal:
              CanonicalUser:
                - !GetAtt oaiWebsite.S3CanonicalUserId

  ## Create execution role for IndexDoc function
  roleIndexDoc:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${AWS::StackName}-indexdoc-${AWS::Region}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'sts:AssumeRole'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
                - 'edgelambda.amazonaws.com'
      Policies:
        - PolicyName: 'inline-policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'

  ## Index dodcument function
  funcIndexDoc:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-indexdoc-${AWS::Region}'
      Runtime: python3.7
      Handler: index.lambda_handler
      InlineCode: |
        # Lambda function handler
        def lambda_handler(event, context):
            # Request is the response, too
            request = event['Records'][0]['cf']['request']

            # Check if the URI ends with '/', then append 'index.html' to it
            if request['uri'].endswith('/'):
                request['uri'] = request['uri'] + 'index.html'

            # Return modified request
            return request
      Description: 'Injects index.html into any URI request for subfolders in the path'
      MemorySize: 128
      Timeout: 5
      Role: !GetAtt roleIndexDoc.Arn
      Tags:
        Name: !Sub '${AWS::StackName}-indexdoc-${AWS::Region}'
        Environment: !Ref tagEnvironment
        Workload: !Ref 'AWS::StackName'

  ## Index document function version
  funcIndexDocVersion:
    Type: AWS::Lambda::Version
    Properties:
      Description: 'Injects index.html into any URI request for subfolders in the path'
      FunctionName: !Ref funcIndexDoc

  ## CloudFront distribution
  cfWebsite:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Comment: !Sub '${AWS::StackName}-cdn'
        Aliases: !If [ condProd, [ 'awsauroralabsmy.com', 'www.awsauroralabsmy.com' ], !Ref "AWS::NoValue" ]
        DefaultRootObject: index.html
        Enabled: true
        IPV6Enabled: true
        PriceClass: PriceClass_All
        ViewerCertificate:
          CloudFrontDefaultCertificate: !If [ condProd, !Ref "AWS::NoValue", true ]
          AcmCertificateArn: !If [ condProd, !Sub 'arn:aws:acm:us-east-1:${AWS::AccountId}:certificate/f81ee321-c868-48c3-8bb8-06a058b06846', !Ref "AWS::NoValue" ]
          MinimumProtocolVersion: 'TLSv1.1_2016'
          SslSupportMethod: !If [ condProd, 'sni-only', !Ref "AWS::NoValue" ]
        Restrictions:
          GeoRestriction:
            RestrictionType: blacklist
            Locations: [ AF, IR, IQ, LY, SY ]
        Logging:
          Bucket: !Sub '${s3Logs}.s3.amazonaws.com'
          IncludeCookies: false
          Prefix: "cfwebsite/"
        DefaultCacheBehavior:
          AllowedMethods: [ GET, HEAD ]
          CachedMethods: [ GET, HEAD ]
          Compress: true
          MaxTTL: 86400
          MinTTL: 0
          DefaultTTL: 3600
          TargetOriginId: !Sub ${s3Website}-site
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          LambdaFunctionAssociations:
            - EventType: origin-request
              LambdaFunctionARN: !Ref funcIndexDocVersion
        CacheBehaviors:
            - AllowedMethods: [ GET, HEAD ]
              CachedMethods: [ GET, HEAD ]
              Compress: true
              MaxTTL: 86400
              MinTTL: 0
              DefaultTTL: 3600
              TargetOriginId: !Sub ${s3Website}-templates
              PathPattern: /templates/*
              ViewerProtocolPolicy: redirect-to-https
              ForwardedValues:
                QueryString: false
                Cookies:
                  Forward: none
            - AllowedMethods: [ GET, HEAD ]
              CachedMethods: [ GET, HEAD ]
              Compress: true
              MaxTTL: 86400
              MinTTL: 0
              DefaultTTL: 3600
              TargetOriginId: !Sub ${s3Website}-scripts
              PathPattern: /scripts/*
              ViewerProtocolPolicy: redirect-to-https
              ForwardedValues:
                QueryString: false
                Cookies:
                  Forward: none
            - AllowedMethods: [ GET, HEAD ]
              CachedMethods: [ GET, HEAD ]
              Compress: true
              MaxTTL: 86400
              MinTTL: 0
              DefaultTTL: 3600
              TargetOriginId: !Sub ${s3Website}-support
              PathPattern: /support/*
              ViewerProtocolPolicy: redirect-to-https
              ForwardedValues:
                QueryString: false
                Cookies:
                  Forward: none
        Origins:
          - Id: !Sub ${s3Website}-site
            DomainName: !Sub '${s3Website}.s3.amazonaws.com'
            OriginPath: /website
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${oaiWebsite}'
          - Id: !Sub ${s3Website}-templates
            DomainName: !Sub '${s3Website}.s3.amazonaws.com'
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${oaiWebsite}'
          - Id: !Sub ${s3Website}-scripts
            DomainName: !Sub '${s3Website}.s3.amazonaws.com'
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${oaiWebsite}'
          - Id: !Sub ${s3Website}-support
            DomainName: !Sub '${s3Website}.s3.amazonaws.com'
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${oaiWebsite}'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-cdn-${AWS::Region}'
        - Key: Environment
          Value: !Ref tagEnvironment
        - Key: Workload
          Value: !Ref 'AWS::StackName'

  ## S3 bucket to host analytics
  s3Analytics:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${AWS::StackName}-analytics-${AWS::Region}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
            Status: Enabled
      LoggingConfiguration:
        DestinationBucketName: !Ref s3Logs
        LogFilePrefix: "s3analytics/"
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-analytics-${AWS::Region}'
        - Key: Environment
          Value: !Ref tagEnvironment
        - Key: Workload
          Value: !Ref 'AWS::StackName'

  ## Role for Firehose to write to S3
  roleWriteAnalytics:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${AWS::StackName}-analytics-${AWS::Region}'
      Description: Role to permit the Firehose delivery stream to write to S3.
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'sts:AssumeRole'
            Principal:
              Service:
                - 'firehose.amazonaws.com'
      Policies:
        - PolicyName: 'inline-policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:AbortMultipartUpload'
                  - 's3:GetBucketLocation'
                  - 's3:GetObject'
                  - 's3:ListBucket'
                  - 's3:ListBucketMultipartUploads'
                  - 's3:PutObject'
                Resource:
                  - !GetAtt s3Analytics.Arn
                  - !Sub 'arn:aws:s3:::${s3Analytics}/*'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-analytics-${AWS::Region}'
        - Key: Environment
          Value: !Ref tagEnvironment
        - Key: Workload
          Value: !Ref 'AWS::StackName'

  ## Firehose delivery stream to accumulate analytics
  fireAnalyticsStream:
    Type: 'AWS::KinesisFirehose::DeliveryStream'
    Properties:
      DeliveryStreamName: !Sub '${AWS::StackName}-analytics'
      DeliveryStreamType: DirectPut
      ExtendedS3DestinationConfiguration:
        BucketARN: !GetAtt s3Analytics.Arn
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 10
        CompressionFormat: ZIP
        Prefix: !Sub 'v1-${tagEnvironment}-events/'
        ErrorOutputPrefix: !Sub 'v1-${tagEnvironment}-errors/'
        RoleARN: !GetAtt roleWriteAnalytics.Arn

  ## API endpoint fronting the tracking implementation
  apiLabsBackend:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${AWS::StackName}-labs-api'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-labs-api'
        - Key: Environment
          Value: !Ref tagEnvironment
        - Key: Workload
          Value: !Ref 'AWS::StackName'

  ## Role for API Gateway to write to the Delivery Stream
  roleApiMethod:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${AWS::StackName}-api-${AWS::Region}'
      Description: Role to permit the API method to integrate with Firehose
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'sts:AssumeRole'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
      Policies:
        - PolicyName: 'inline-policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - firehose:PutRecord
              Resource: "*"

  ## API method to accept analytics events
  apiAnalyticsMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS
        Credentials: !GetAtt roleApiMethod.Arn
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:firehose:action/PutRecord'
        IntegrationHttpMethod: POST
        RequestTemplates:
          application/json: #now the mapping template for an incoming JSON
            Fn::Join:
              - ""
              - - "#set( $b64 = $util.base64Encode(\"$input.body\") )\n"
                - "{\n"
                - "  \"DeliveryStreamName\": \""
                - Ref: fireAnalyticsStream
                - "\",\n"
                - "  \"Record\": { \"Data\": \"$b64\" }\n}"
        RequestParameters:
          integration.request.header.Content-Type: "'application/x-amz-json-1.1'"
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: '{"status":"OK"}'
      MethodResponses:
        - StatusCode: 200
      ResourceId: !GetAtt apiLabsBackend.RootResourceId
      RestApiId: !Ref apiLabsBackend

  ## API deployment
  ApiGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - apiAnalyticsMethod
    Properties:
      RestApiId: !Ref apiLabsBackend
      StageName: track

## Outputs
Outputs:
  Environment:
    Value: !Ref tagEnvironment
  ContentBucket:
    Value: !Ref s3Website
  DistroEndpoint:
    Value: !If [ condProd, 'awsauroralabsmy.com', !GetAtt cfWebsite.DomainName ]
  Region:
    Value: !Ref 'AWS::Region'
  TrackEndpoint:
    Value: !Sub '${apiLabsBackend}.execute-api.${AWS::Region}.amazonaws.com'
